xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Abhinavpatel00, Takahiro Aoyagi, Marcelo Arroyo, Hirbod Behnam, Silas
Boyd-Wickizer, Anton Burtsev, carlclone, Ian Chen, clivezeng, Dan
Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,Wenyang Duan,
echtwerner, eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi,
Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam
Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš
Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich,
mes900903, Mark Morrissey, mtasm, Joel Nider, Hayato Ohhashi,
OptimisticSide, papparapa, phosphagos, Harry Porter, Greg Price, Zheng
qhuo, Quancheng, RayAndrew, Jude Rich, segfault, Ayan Shafqat, Eldar
Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire, Taojie, Cam Tenny,
tyfkda, Warren Toomey, Stephen Tu, Alissa Tung, Rafael Ubal, unicornx,
Amane Uehara, Pablo Ventura, Luc Videau, Xi Wang, WaheedHafez, Keiichi
Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653, Andy
Zhang, Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".

PROJECT 3

FILES MODIFIED

kernel/proc.h
Added int stride and int pass to struct proc.

kernel/proc.c
Modified scheduler() to select process with lowest pass.
Incremented pass and runtime each time process runs.
Added overflow protection using MAX_PASS_TOTAL.

kernel/sysproc.c
Added sys_setStride system call to set stride from user input

kernel/syscall.h, kernel/syscall.c
Added SYS_setStride.

user/hardwork.c
Added and modified to accept stride value from command line and call setstride().

user/getpinfo.c
Updated to display pass and passTotal values to show information of running processes

kernel/defs.h
Added struct pstat and setStride

Makefile
Updated with new commands

EXAMPLE RUN

I ran four hardwork processes with different strides

$ hardwork 1 &
$ starting main
initialized
hardwork 5 &
starting$ main
 initialized
hardwork 20 &
starting$ main
initialized
 hardwork 2 &
$starting main
initialized
 hardwork 25 &
starting main
initialized

Then ran 'getpinfo' command

$ getpinfo
pid: 1, runtime: 28, pass: 2, stride: 1
pid: 2, runtime: 26, pass: 6, stride: 1
pid: 13, runtime: 5, pass: 5, stride: 1
pid: 4, runtime: 249, pass: 87, stride: 1
pid: 6, runtime: 165, pass: 295, stride: 5
pid: 8, runtime: 80, pass: 300, stride: 20
pid: 10, runtime: 87, pass: 173, stride: 2
pid: 12, runtime: 13, pass: 301, stride: 25
passTotal: 1171
$ getpinfo
pid: 1, runtime: 28, pass: 0, stride: 1
pid: 2, runtime: 29, pass: 1, stride: 1
pid: 14, runtime: 1, pass: 1, stride: 1
pid: 4, runtime: 428, pass: 118, stride: 1
pid: 6, runtime: 288, pass: 405, stride: 5
pid: 8, runtime: 112, pass: 420, stride: 20
pid: 10, runtime: 265, pass: 234, stride: 2
pid: 12, runtime: 38, pass: 400, stride: 25
passTotal: 1579
$ getpinfo
pid: 1, runtime: 28, pass: 0, stride: 1
pid: 2, runtime: 32, pass: 1, stride: 1
pid: 15, runtime: 1, pass: 1, stride: 1
pid: 4, runtime: 2804, pass: 111, stride: 1
pid: 6, runtime: 1931, pass: 380, stride: 5
pid: 8, runtime: 526, pass: 380, stride: 20
pid: 10, runtime: 2627, pass: 220, stride: 2
pid: 12, runtime: 374, pass: 400, stride: 25
passTotal: 1493

Based on results, process with low stride gets most cpu time which causes less pass value
And process with higher strides leads to less cpu time and higher pass value
This clearly shows that program scheduler prioritizes processes with low stride value
